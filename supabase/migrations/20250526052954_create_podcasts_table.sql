-- Create the podcasts table
CREATE TABLE public.podcasts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    description TEXT,
    cover_image_url TEXT,
    audio_url TEXT NOT NULL,
    duration_seconds INTEGER,
    host_name TEXT,
    published_at TIMESTAMPTZ,
    category_id UUID,
    user_id UUID, -- Creator/Uploader
    tags TEXT[],
    is_premium BOOLEAN DEFAULT FALSE,
    status TEXT DEFAULT 'draft'::text CHECK (status IN ('draft', 'published', 'archived')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add indexes for performance
CREATE INDEX idx_podcasts_slug ON public.podcasts(slug);
CREATE INDEX idx_podcasts_category_id ON public.podcasts(category_id);
CREATE INDEX idx_podcasts_user_id ON public.podcasts(user_id);
CREATE INDEX idx_podcasts_published_at ON public.podcasts(published_at DESC);

-- Add foreign key constraints
ALTER TABLE public.podcasts
ADD CONSTRAINT fk_podcasts_category_id
FOREIGN KEY (category_id) REFERENCES public.categories(id) ON DELETE SET NULL;

ALTER TABLE public.podcasts
ADD CONSTRAINT fk_podcasts_user_id
FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE SET NULL;

-- Enable Row Level Security (RLS)
ALTER TABLE public.podcasts ENABLE ROW LEVEL SECURITY;

-- Create policies for public access (adjust as needed)
-- Allow public read access to published podcasts
CREATE POLICY "Allow public read access to published podcasts"
ON public.podcasts
FOR SELECT
TO anon, authenticated
USING (status = 'published'::text);

-- Allow authenticated users to manage their own podcasts (example)
CREATE POLICY "Allow individual insert access"
ON public.podcasts
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow individual update access"
ON public.podcasts
FOR UPDATE
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow individual delete access"
ON public.podcasts
FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Allow service_role full access (standard Supabase practice)
CREATE POLICY "Allow full access to service_role"
ON public.podcasts
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);


-- Add trigger to update 'updated_at' timestamp
-- (Assumes the function public.update_updated_at_column() already exists from previous migrations)
CREATE TRIGGER update_podcasts_updated_at
BEFORE UPDATE ON public.podcasts
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Grant usage for the table to roles
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.podcasts TO authenticated;
GRANT SELECT ON TABLE public.podcasts TO anon;
GRANT ALL ON TABLE public.podcasts TO service_role;

-- Grant usage for sequences if any (gen_random_uuid is built-in)
-- No explicit sequence grants needed for UUIDs generated by gen_random_uuid()

SELECT 'Podcasts table, policies, and trigger created successfully.' AS status;
