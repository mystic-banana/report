/**
 * HTML to PDF utility functions
 * Uses html2canvas and jsPDF for client-side PDF generation
 */
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';

interface PDFOptions {
  pageSize?: string;
  orientation?: 'portrait' | 'landscape';
  margin?: {
    top?: number;
    right?: number;
    bottom?: number;
    left?: number;
  } | number[];
  fileName?: string; // Added for compatibility with existing code
  pageFooter?: boolean;
  enableLinks?: boolean;
  quality?: number;
  scale?: number;
  watermark?: string | boolean;
}

/**
 * Captures an HTML element and converts it to a downloadable PDF
 * 
 * @param element The HTML element to capture
 * @param filename The filename for the generated PDF
 * @param options PDF generation options
 * @returns Promise that resolves when PDF is generated and download started
 */
export async function captureHTMLElementToPDF(
  element: HTMLElement,
  filename: string,
  options: PDFOptions = {}
): Promise<void> {
  if (!element) {
    throw new Error('Element is required for PDF generation');
  }

  // Set default options
  const defaultOptions: PDFOptions = {
    pageSize: 'a4',
    orientation: 'portrait',
    margin: { top: 10, right: 10, bottom: 10, left: 10 },
    pageFooter: false,
    enableLinks: false,
    quality: 2, // Higher value means better quality
    scale: 2,   // Scale factor for the canvas
  };

  // Merge options
  const pdfOptions = { ...defaultOptions, ...options };
  
  // Define page dimensions based on pageSize and orientation
  let pageWidth: number, pageHeight: number;
  
  // Process margin to handle both array and object formats
  const margin = {
    top: 10,
    right: 10,
    bottom: 10,
    left: 10
  };
  
  // Convert array-style margin to object format if needed
  if (Array.isArray(pdfOptions.margin)) {
    const [top, right, bottom, left] = pdfOptions.margin;
    margin.top = top || margin.top;
    margin.right = right || margin.right;
    margin.bottom = bottom || margin.bottom;
    margin.left = left || margin.left;
  } else if (pdfOptions.margin) {
    margin.top = pdfOptions.margin.top ?? margin.top;
    margin.right = pdfOptions.margin.right ?? margin.right;
    margin.bottom = pdfOptions.margin.bottom ?? margin.bottom;
    margin.left = pdfOptions.margin.left ?? margin.left;
  }
  
  switch (pdfOptions.pageSize?.toLowerCase()) {
    case 'letter':
      pageWidth = 215.9;
      pageHeight = 279.4;
      break;
    case 'legal':
      pageWidth = 215.9;
      pageHeight = 355.6;
      break;
    case 'a3':
      pageWidth = 297;
      pageHeight = 420;
      break;
    case 'a4':
    default:
      pageWidth = 210;
      pageHeight = 297;
      break;
  }
  
  // Swap dimensions if landscape
  if (pdfOptions.orientation === 'landscape') {
    [pageWidth, pageHeight] = [pageHeight, pageWidth];
  }
  
  try {
    console.log('Starting HTML to PDF conversion...');
    
    // Create canvas from HTML element
    const canvas = await html2canvas(element, {
      scale: pdfOptions.scale || 2,
      useCORS: true,
      logging: false,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });
    
    // Calculate dimensions to maintain aspect ratio
    const imgWidth = pageWidth - (margin.left + margin.right);
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    // Initialize PDF with proper orientation
    const pdf = new jsPDF({
      orientation: pdfOptions.orientation,
      unit: 'mm',
      format: pdfOptions.pageSize || 'a4'
    });
    
    // Convert canvas to image
    const imgData = canvas.toDataURL('image/jpeg', pdfOptions.quality ? pdfOptions.quality / 2 : 1);
    
    // Calculate how many pages we need
    const pagesNeeded = Math.ceil(imgHeight / (pageHeight - (margin.top + margin.bottom)));
    
    // Split content across multiple pages if needed
    let heightLeft = imgHeight;
    let position = 0;
    
    // Add first page
    pdf.addImage(
      imgData, 
      'JPEG', 
      margin.left, 
      margin.top, 
      imgWidth, 
      imgHeight
    );
    heightLeft -= pageHeight;
    
    // Add watermark if specified
    if (pdfOptions.watermark) {
      const watermarkText = typeof pdfOptions.watermark === 'string' 
        ? pdfOptions.watermark 
        : 'Generated by Mystic Banana';
        
      pdf.setTextColor(200, 200, 200);
      pdf.setFontSize(14);
      pdf.text(
        watermarkText,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center', angle: 45 }
      );
    }
    
    // Add page numbers if requested
    if (pdfOptions.pageFooter) {
      pdf.setFontSize(10);
      pdf.setTextColor(100, 100, 100);
      pdf.text(
        `Page 1 of ${pagesNeeded}`, 
        pageWidth / 2, 
        pageHeight - 5, 
        { align: 'center' }
      );
    }
    
    // Add additional pages if content doesn't fit on one page
    for (let i = 1; i < pagesNeeded; i++) {
      position = -(pageHeight * i);
      
      // Add new page
      pdf.addPage();
      
      // Add image portion for this page
      pdf.addImage(
        imgData, 
        'JPEG', 
        margin.left, 
        position + margin.top, 
        imgWidth, 
        imgHeight
      );
      
      // Add watermark if specified
      if (pdfOptions.watermark) {
        const watermarkText = typeof pdfOptions.watermark === 'string' 
          ? pdfOptions.watermark 
          : 'Generated by Mystic Banana';
          
        pdf.setTextColor(200, 200, 200);
        pdf.setFontSize(14);
        pdf.text(
          watermarkText,
          pageWidth / 2,
          pageHeight - 10,
          { align: 'center', angle: 45 }
        );
      }
      
      // Add page numbers if requested
      if (pdfOptions.pageFooter) {
        pdf.setFontSize(10);
        pdf.setTextColor(100, 100, 100);
        pdf.text(
          `Page ${i + 1} of ${pagesNeeded}`, 
          pageWidth / 2, 
          pageHeight - 5, 
          { align: 'center' }
        );
      }
    }
    
    // Ensure filename has .pdf extension
    const filenameWithExt = filename.endsWith('.pdf') ? filename : `${filename}.pdf`;
    
    // Save PDF and trigger download
    console.log('PDF generation complete. Saving file...');
    pdf.save(filenameWithExt);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    throw new Error(`PDF generation failed: ${errorMessage}`);
  }
}
