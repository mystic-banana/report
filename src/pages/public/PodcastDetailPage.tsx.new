import React, { useEffect, useState, useRef } from 'react';
import DOMPurify from 'dompurify';
import { useParams, Link } from 'react-router-dom';
import { supabase } from '../../lib/supabaseClient';
import { fetchEpisodesForPodcast } from '../../utils/fetchEpisodes';
import { Headphones, RefreshCw, Play, Pause, Calendar, Clock, List, Share2, BookmarkPlus } from 'lucide-react';
import PageLayout from '../../components/layout/PageLayout';
import PodcastPlayer from '../../components/podcasts/PodcastPlayer';
import PodcastPlaylist from '../../components/podcasts/PodcastPlaylist';
import FavoritesButton from '../../components/podcasts/FavoritesButton';
import SEO from '../../components/SEO';
import AdUnit from '../../components/ads/AdUnit';
import { formatDistanceToNow } from 'date-fns';
import { useAuthStore } from '../../store/authStore';

// Helper function to check if a string is a UUID
const isUUID = (str: string) => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
};

const PodcastDetailPage: React.FC = () => {
  const { slug = '' } = useParams<{ slug: string }>();
  const { user } = useAuthStore();
  
  const [podcast, setPodcast] = useState<any>(null);
  const [episodes, setEpisodes] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentEpisode, setCurrentEpisode] = useState<any>(null);
  const [refreshingEpisodes, setRefreshingEpisodes] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [recommendedPodcasts, setRecommendedPodcasts] = useState<any[]>([]);
  const [showPlaylistModal, setShowPlaylistModal] = useState(false);
  const [isFavorited, setIsFavorited] = useState(false);
  
  // Refs for scrolling
  const episodesRef = useRef<HTMLDivElement>(null);
  const descriptionRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    fetchPodcastAndEpisodes();
    window.scrollTo(0, 0);
  }, [slug]);
  
  // Function to refresh episodes from the RSS feed
  const refreshEpisodes = async () => {
    if (!podcast?.feed_url || !podcast?.id || refreshingEpisodes) {
      return;
    }
    
    setRefreshingEpisodes(true);
    
    try {
      const success = await fetchEpisodesForPodcast(podcast.id, podcast.feed_url);
      
      if (success) {
        // Fetch updated episodes from the database
        const { data: updatedEpisodes, error: fetchError } = await supabase
          .from('episodes')
          .select('*')
          .eq('podcast_id', podcast.id)
          .order('pub_date', { ascending: false });
          
        if (fetchError) {
          console.error('Error fetching updated episodes:', fetchError);
        } else {
          setEpisodes(updatedEpisodes || []);
        }
      }
    } catch (err) {
      console.error('Error refreshing episodes:', err);
    } finally {
      setRefreshingEpisodes(false);
    }
  };
  
  // Fetch podcast and episodes data
  const fetchPodcastAndEpisodes = async () => {
    console.log('Fetching podcast and episodes for slug:', slug);
    setLoading(true);
    setError(null);
    
    try {
      let podcastData;
      
      // Check if slug is a UUID
      if (isUUID(slug)) {
        const { data, error: podcastError } = await supabase
          .from('podcasts')
          .select('*')
          .eq('id', slug)
          .eq('status', 'approved')
          .single();
          
        if (podcastError) {
          throw new Error(`Error fetching podcast: ${podcastError.message}`);
        }
        
        podcastData = data;
      } else {
        // Handle slug as a string (name-based slug)
        // First try exact match on slug field if it exists
        try {
          const { data: slugMatch, error: slugError } = await supabase
            .from('podcasts')
            .select('*')
            .eq('slug', slug)
            .eq('status', 'approved')
            .single();
            
          if (!slugError && slugMatch) {
            podcastData = slugMatch;
          } else {
            // If no exact slug match, try to find by name (legacy support)
            const { data: nameMatch, error: nameError } = await supabase
              .from('podcasts')
              .select('*')
              .ilike('name', slug.replace(/-/g, ' '))
              .eq('status', 'approved')
              .single();
              
            if (nameError || !nameMatch) {
              throw new Error('Podcast not found');
            }
            
            podcastData = nameMatch;
          }
        } catch (err) {
          throw new Error('Podcast not found');
        }
      }
      
      if (!podcastData) {
        throw new Error('Podcast not found');
      }
      
      setPodcast(podcastData);
      
      // Fetch episodes for this podcast
      const { data: episodesData, error: episodesError } = await supabase
        .from('episodes')
        .select('*')
        .eq('podcast_id', podcastData.id)
        .order('pub_date', { ascending: false });
        
      if (episodesError) {
        console.error('Error fetching episodes:', episodesError);
      } else {
        setEpisodes(episodesData || []);
      }
      
      // Fetch similar podcasts (same category)
      if (podcastData.category_id) {
        const { data: similarPodcasts, error: similarError } = await supabase
          .from('podcasts')
          .select('*')
          .eq('category_id', podcastData.category_id)
          .eq('status', 'approved')
          .neq('id', podcastData.id)
          .limit(4);
          
        if (!similarError) {
          setRecommendedPodcasts(similarPodcasts || []);
        }
      } else if (podcastData.category) {
        // Legacy support for category as string
        const { data: similarPodcasts, error: similarError } = await supabase
          .from('podcasts')
          .select('*')
          .eq('category', podcastData.category)
          .eq('status', 'approved')
          .neq('id', podcastData.id)
          .limit(4);
          
        if (!similarError) {
          setRecommendedPodcasts(similarPodcasts || []);
        }
      }
    } catch (err: any) {
      console.error('Error in fetchPodcastAndEpisodes:', err);
      setError(err.message || 'Error fetching podcast data');
    } finally {
      setLoading(false);
    }
  };

  // Handle playing an episode
  const handlePlayEpisode = (episode: any) => {
    setCurrentEpisode(episode);
    // Set isPlaying to true initially when a new episode is selected
    setIsPlaying(true);
  };
  
  // Play next or previous episode
  const handlePlayNextEpisode = () => {
    const currentIndex = episodes.findIndex(e => e.id === currentEpisode?.id);
    if (currentIndex < episodes.length - 1) {
      handlePlayEpisode(episodes[currentIndex + 1]);
    }
  };
  
  const handlePlayPreviousEpisode = () => {
    const currentIndex = episodes.findIndex(e => e.id === currentEpisode?.id);
    if (currentIndex > 0) {
      handlePlayEpisode(episodes[currentIndex - 1]);
    }
  };
  
  // Format date for display
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (err) {
      return 'Unknown date';
    }
  };
  
  // Format duration for display
  const formatDuration = (duration: string) => {
    if (!duration) return 'Unknown duration';
    
    // Handle various duration formats
    
    // Format: HH:MM:SS
    if (/^\d{1,2}:\d{2}:\d{2}$/.test(duration)) {
      return duration;
    }
    
    // Format: MM:SS
    if (/^\d{1,2}:\d{2}$/.test(duration)) {
      return duration;
    }
    
    // Format: SSs (e.g., "3600s")
    if (/^(\d+)s$/.test(duration)) {
      const seconds = parseInt(duration.replace('s', ''));
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const remainingSeconds = seconds % 60;
      
      if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
      } else {
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
      }
    }
    
    // Format: seconds as number
    if (!isNaN(parseInt(duration))) {
      const seconds = parseInt(duration);
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const remainingSeconds = seconds % 60;
      
      if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
      } else {
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
      }
    }
    
    // Just return the original if we can't parse it
    return duration;
  };
  
  // Return the component with proper conditional rendering
  return (
    <PageLayout>
      {loading ? (
        <div className="min-h-screen bg-gradient-to-b from-dark-900 to-dark-800 flex items-center justify-center text-white">
          <div className="text-center">
            <div className="animate-spin mb-4 mx-auto w-10 h-10 border-4 border-accent-500 border-t-transparent rounded-full"></div>
            <p>Loading podcast details...</p>
          </div>
        </div>
      ) : error ? (
        <div className="min-h-screen bg-gradient-to-b from-dark-900 to-dark-800 flex items-center justify-center text-white p-4">
          <div className="text-center max-w-md">
            <h2 className="text-2xl font-bold mb-4 text-red-500">Podcast Not Found</h2>
            <p className="mb-6">{error}</p>
            <Link 
              to="/podcasts" 
              className="inline-block bg-accent-500 hover:bg-accent-600 text-white font-semibold py-2 px-6 rounded-lg transition-colors"
            >
              Browse All Podcasts
            </Link>
          </div>
        </div>
      ) : podcast ? (
        <>
          {/* Hero Section */}
          <div className="bg-gradient-to-b from-dark-900 to-dark-800 text-white">
            <div className="container mx-auto pt-8 pb-6 px-4">
              <div className="flex flex-col md:flex-row items-start gap-8">
                {/* Podcast Image */}
                <div className="w-full md:w-1/3 lg:w-1/4 flex-shrink-0">
                  <div className="sticky top-24">
                    <div className="bg-dark-800 rounded-lg overflow-hidden shadow-xl">
                      {podcast.image_url ? (
                        <img 
                          src={podcast.image_url} 
                          alt={podcast.name} 
                          className="w-full aspect-square object-cover"
                        />
                      ) : (
                        <div className="w-full aspect-square bg-dark-700 rounded-lg flex items-center justify-center">
                          <Headphones size={64} className="text-accent-500" />
                        </div>
                      )}
                    </div>

                    {/* Action buttons */}
                    <div className="mt-4 grid grid-cols-4 gap-2">
                      <FavoritesButton
                        podcastId={podcast.id}
                        onFavoriteChange={setIsFavorited}
                        className="flex flex-col items-center justify-center p-2 rounded-lg bg-dark-800 hover:bg-dark-700 transition-colors"
                      />

                      <button 
                        onClick={() => {
                          if (!user) {
                            // Show login prompt if user is not logged in
                            alert('Please log in to add to playlists');
                            return;
                          }
                          setShowPlaylistModal(true);
                        }}
                        className="flex flex-col items-center justify-center p-2 rounded-lg bg-dark-800 hover:bg-dark-700 transition-colors"
                        aria-label="Add to playlist"
                        title="Add to playlist"
                      >
                        <BookmarkPlus size={24} className="text-gray-400 group-hover:text-white" />
                        <span className="text-xs mt-1">Playlist</span>
                      </button>

                      <button 
                        onClick={() => {
                          if (navigator.share) {
                            navigator.share({
                              title: podcast.name,
                              text: `Check out ${podcast.name} podcast`,
                              url: window.location.href
                            }).catch(err => console.log('Error sharing', err));
                          } else {
                            navigator.clipboard.writeText(window.location.href);
                            alert('Link copied to clipboard!');
                          }
                        }}
                        className="flex flex-col items-center justify-center p-2 rounded-lg bg-dark-800 hover:bg-dark-700 transition-colors"
                        aria-label="Share podcast"
                        title="Share podcast"
                      >
                        <Share2 size={24} className="text-gray-400 group-hover:text-white" />
                        <span className="text-xs mt-1">Share</span>
                      </button>

                      <button 
                        onClick={refreshEpisodes}
                        disabled={refreshingEpisodes}
                        className="flex flex-col items-center justify-center p-2 rounded-lg bg-dark-800 hover:bg-dark-700 transition-colors"
                        aria-label="Refresh episodes"
                        title="Refresh episodes"
                      >
                        <RefreshCw 
                          size={24} 
                          className={`text-gray-400 group-hover:text-white ${refreshingEpisodes ? 'animate-spin' : ''}`} 
                        />
                        <span className="text-xs mt-1">Refresh</span>
                      </button>
                    </div>

                    {/* Quick stats */}
                    <div className="mt-4 bg-dark-800 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-gray-400">Episodes:</span>
                        <span className="font-semibold">{episodes.length}</span>
                      </div>
                      {podcast.last_fetched_at && (
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400">Updated:</span>
                          <span className="text-sm">
                            {formatDistanceToNow(new Date(podcast.last_fetched_at), { addSuffix: true })}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Podcast Details */}
                <div className="w-full md:w-2/3 lg:w-3/4">
                  <h1 className="text-3xl md:text-4xl font-bold mb-2">{podcast.name}</h1>
                  
                  {podcast.author && (
                    <p className="text-xl text-gray-300 mb-4">{podcast.author}</p>
                  )}
                  
                  {/* Quick navigation */}
                  <div className="flex flex-wrap gap-3 mb-6">
                    <button 
                      onClick={() => episodesRef.current?.scrollIntoView({ behavior: 'smooth' })}
                      className="bg-dark-700 hover:bg-dark-600 px-4 py-2 rounded-full text-sm flex items-center gap-2 transition-colors"
                    >
                      <List size={16} />
                      Episodes
                    </button>
                    
                    <button 
                      onClick={() => descriptionRef.current?.scrollIntoView({ behavior: 'smooth' })}
                      className="bg-dark-700 hover:bg-dark-600 px-4 py-2 rounded-full text-sm flex items-center gap-2 transition-colors"
                    >
                      About
                    </button>
                  </div>
                  
                  {/* Description */}
                  <div ref={descriptionRef}>
                    <h2 className="text-2xl font-bold mb-4">About this podcast</h2>
                    {podcast.description ? (
                      <div 
                        className="prose prose-invert max-w-none mb-8"
                        dangerouslySetInnerHTML={{ 
                          __html: DOMPurify.sanitize(podcast.description) 
                        }}
                      />
                    ) : (
                      <p className="text-gray-400 mb-8">No description available for this podcast.</p>
                    )}
                  </div>
                  
                  {/* Episodes */}
                  <div ref={episodesRef}>
                    <h2 className="text-2xl font-bold mb-4">Episodes</h2>
                    
                    {episodes.length === 0 ? (
                      <div className="bg-dark-800 rounded-lg p-6 text-center">
                        <p className="text-gray-400 mb-4">No episodes found for this podcast.</p>
                        <button
                          onClick={refreshEpisodes}
                          disabled={refreshingEpisodes}
                          className="bg-accent-500 hover:bg-accent-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 mx-auto transition-colors"
                        >
                          <RefreshCw size={16} className={refreshingEpisodes ? 'animate-spin' : ''} />
                          Refresh Episodes
                        </button>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {episodes.map((episode) => (
                          <div 
                            key={episode.id} 
                            className={`bg-dark-800 hover:bg-dark-700 rounded-lg overflow-hidden transition-colors ${
                              currentEpisode?.id === episode.id ? 'border-l-4 border-accent-500' : ''
                            }`}
                          >
                            <div className="p-4">
                              <div className="flex items-start gap-4">
                                {/* Episode thumbnail or play button */}
                                <div className="flex-shrink-0">
                                  <button
                                    onClick={() => handlePlayEpisode(episode)}
                                    className={`w-12 h-12 rounded-full flex items-center justify-center transition-colors ${
                                      currentEpisode?.id === episode.id && isPlaying
                                        ? 'bg-accent-500 text-white'
                                        : 'bg-dark-700 text-accent-500 hover:bg-accent-500 hover:text-white'
                                    }`}
                                    aria-label={
                                      currentEpisode?.id === episode.id && isPlaying
                                        ? 'Pause episode'
                                        : 'Play episode'
                                    }
                                  >
                                    {currentEpisode?.id === episode.id && isPlaying ? (
                                      <Pause size={20} />
                                    ) : (
                                      <Play size={20} />
                                    )}
                                  </button>
                                </div>
                                
                                {/* Episode details */}
                                <div className="flex-1 min-w-0">
                                  <h3 className="font-semibold text-white mb-1 line-clamp-2">
                                    {episode.title}
                                  </h3>
                                  
                                  <div className="flex flex-wrap items-center text-sm text-gray-400 gap-x-4 gap-y-1 mb-2">
                                    {episode.pub_date && (
                                      <div className="flex items-center gap-1">
                                        <Calendar size={14} />
                                        <span>{formatDate(episode.pub_date)}</span>
                                      </div>
                                    )}
                                    
                                    {episode.duration && (
                                      <div className="flex items-center gap-1">
                                        <Clock size={14} />
                                        <span>{formatDuration(episode.duration)}</span>
                                      </div>
                                    )}
                                  </div>
                                  
                                  {episode.description && (
                                    <div className="text-sm text-gray-300 line-clamp-2">
                                      <div
                                        dangerouslySetInnerHTML={{
                                          __html: DOMPurify.sanitize(episode.description)
                                        }}
                                      />
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="container mx-auto max-w-6xl px-4 py-8 md:px-6 md:py-10">
            {/* Ad Unit */}
            <div className="mb-8">
              <AdUnit placement="podcast" className="mx-auto" />
            </div>
            
            {/* Recommended podcasts */}
            {recommendedPodcasts.length > 0 && (
              <div className="mt-10 sm:mt-16">
                <h2 className="text-2xl font-bold mb-6 border-b border-dark-700 pb-3">You Might Also Like</h2>
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
                  {recommendedPodcasts.map(recommendedPodcast => (
                    <Link 
                      key={recommendedPodcast.id} 
                      to={`/podcasts/${recommendedPodcast.slug || recommendedPodcast.id}`}
                      className="block group"
                    >
                      <div className="bg-dark-800 rounded-lg overflow-hidden hover:bg-dark-700 transition-colors">
                        <div className="aspect-square relative">
                          {recommendedPodcast.image_url ? (
                            <img 
                              src={recommendedPodcast.image_url} 
                              alt={recommendedPodcast.name} 
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center bg-dark-700">
                              <Headphones size={32} className="text-accent-500" />
                            </div>
                          )}
                          <div className="absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity">
                            <div className="bg-accent-500 rounded-full p-3">
                              <Play size={24} className="text-white" />
                            </div>
                          </div>
                        </div>
                        <div className="p-4">
                          <h3 className="font-semibold text-white line-clamp-1 group-hover:text-accent-400 transition-colors">
                            {recommendedPodcast.name}
                          </h3>
                          <p className="text-gray-400 text-sm mt-1 line-clamp-1">
                            {recommendedPodcast.author || 'Unknown Author'}
                          </p>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>
          
          {/* Fixed podcast player at bottom */}
          {currentEpisode && (
            <div className="fixed bottom-0 left-0 right-0 z-50 shadow-lg">
              <PodcastPlayer 
                episode={{
                  ...currentEpisode,
                  podcast_name: podcast.name,
                  published_at: currentEpisode.pub_date
                }}
                onPlayNextEpisode={handlePlayNextEpisode}
                onPlayPreviousEpisode={handlePlayPreviousEpisode}
                hasNextEpisode={episodes.findIndex(e => e.id === currentEpisode.id) < episodes.length - 1}
                hasPreviousEpisode={episodes.findIndex(e => e.id === currentEpisode.id) > 0}
                onPlayerStateChange={setIsPlaying}
              />
            </div>
          )}
          
          {/* Playlist Modal */}
          {showPlaylistModal && podcast && (
            <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
              <div className="bg-dark-800 rounded-lg shadow-xl w-full max-w-md overflow-hidden">
                <div className="p-4 border-b border-dark-700 flex justify-between items-center">
                  <h3 className="text-lg font-bold text-white">Add to Playlist</h3>
                  <button 
                    onClick={() => setShowPlaylistModal(false)}
                    className="text-gray-400 hover:text-white"
                    aria-label="Close"
                  >
                    &times;
                  </button>
                </div>
                
                <div className="p-4 max-h-96 overflow-y-auto">
                  <PodcastPlaylist 
                    currentPodcast={{
                      id: podcast.id,
                      name: podcast.name
                    }}
                    currentEpisode={currentEpisode}
                  />
                </div>
              </div>
            </div>
          )}
        </>
      ) : null}
    </PageLayout>
  );
};

export default PodcastDetailPage;
