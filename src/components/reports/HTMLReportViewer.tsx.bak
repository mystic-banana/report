import React, { useState, useEffect } from "react";
import { AstrologyReport } from "../../store/astrologyStore";
import { supabase } from "../../lib/supabaseClient";
import LoadingSpinner from "../ui/LoadingSpinner";
import Button from "../ui/Button";
import ReportRenderer from "./ReportRenderer";
import { FileText, Eye, X, Crown, ChevronLeft, Menu, ArrowLeft } from "lucide-react";
import { useNavigate } from "react-router-dom";

interface HTMLReportViewerProps {
  report: AstrologyReport;
  onClose: () => void;
}

const HTMLReportViewer: React.FC<HTMLReportViewerProps> = ({
  report,
  onClose,
}) => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [chartData, setChartData] = useState<any>(null);
  // Legacy view removed, now only using modern view
  const [exportingPDF, setExportingPDF] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  useEffect(() => {
    const fetchChartData = async () => {
      setLoading(true);
      try {
        // Get birth chart data for the report
        const { data: chartInfo, error } = await supabase
          .from("astrology_reports")
          .select(
            "*, birth_charts!inner(name, birth_date, birth_time, chart_data, birth_location)",
          )
          .eq("id", report.id)
          .single();

        if (error) throw error;

        setChartData(chartInfo.birth_charts);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchChartData();
  }, [report.id]);

  // Legacy HTML generation removed

  const downloadPDF = async () => {
    try {
      setExportingPDF(true);
      
      // Get the modern report view element
      const reportElement = document.querySelector('.report-renderer');
      if (!reportElement) {
        throw new Error('Could not find report element');
      }

      const userName = chartData?.name || "User";
      const birthDate = chartData?.birth_date ? new Date(chartData.birth_date).toLocaleDateString() : "";
      
      // Import required libraries
      const html2canvas = (await import('html2canvas')).default;
      const jspdf = (await import('jspdf'));
      const jsPDF = jspdf.jsPDF;
      
      // Create PDF with proper dimensions
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });
      
      // Capture the rendered component with charts and images
      console.log('Starting PDF capture...');
      const canvas = await html2canvas(reportElement as HTMLElement, {
        scale: 1.5, // Balance between quality and performance
        useCORS: true, // Allow cross-origin images
        allowTaint: true,
        backgroundColor: '#121218', // Match the dark background
        logging: true, // Enable logging for debugging
        onclone: (clonedDoc) => {
          // Help ensure CSS is properly applied in the cloned document
          const clonedElement = clonedDoc.querySelector('.report-renderer');
          if (clonedElement) {
            console.log('Cloned report element found');
          }
          return Promise.resolve();
        }
      });
      
      console.log('Canvas rendered, creating PDF...');
      
      // Add the captured content to PDF
      const imgData = canvas.toDataURL('image/png');
      const imgProps = pdf.getImageProperties(imgData);
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
      
      // Add title page with darker background
      pdf.setFillColor(18, 18, 24); // Very dark background
      pdf.rect(0, 0, pdfWidth, pdf.internal.pageSize.getHeight(), 'F');
      
      // Add title
      pdf.setTextColor(255, 255, 255); // White text
      pdf.setFontSize(24);
      pdf.text(report.title, pdfWidth / 2, 40, { align: 'center' });
      
      // Add subtitle
      pdf.setFontSize(12);
      pdf.text(`${report.report_type.replace(/-/g, " ").replace(/\b\w/g, l => l.toUpperCase())} Report`, pdfWidth / 2, 50, { align: 'center' });
      
      // Add user info
      pdf.setFontSize(11);
      pdf.text(`Generated for: ${userName}`, pdfWidth / 2, 60, { align: 'center' });
      pdf.text(`Birth Date: ${birthDate}`, pdfWidth / 2, 66, { align: 'center' });
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pdfWidth / 2, 72, { align: 'center' });
      
      // Add premium badge if applicable
      if (report.is_premium) {
        pdf.setFillColor(155, 107, 204); // Purple color instead of bright amber
        pdf.roundedRect(pdfWidth / 2 - 20, 80, 40, 10, 3, 3, 'F');
        pdf.setTextColor(255, 255, 255); // White text
        pdf.setFontSize(10);
        pdf.text('PREMIUM', pdfWidth / 2, 86, { align: 'center' });
      }
      
      // Add the captured report on the next page
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
      
      // If content is too long, it may need multiple pages
      if (pdfHeight > pdf.internal.pageSize.getHeight()) {
        let heightLeft = pdfHeight;
        let position = 0;
        heightLeft -= pdf.internal.pageSize.getHeight();
        position -= pdf.internal.pageSize.getHeight();
        
        while (heightLeft >= 0) {
          pdf.addPage();
          pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, pdfHeight);
          heightLeft -= pdf.internal.pageSize.getHeight();
          position -= pdf.internal.pageSize.getHeight();
        }
      }
      
      console.log('Saving PDF...');
      // Save the PDF
      pdf.save(`${userName.replace(/\s+/g, "_")}_${report.report_type.replace(/\s+/g, "_")}_Report.pdf`);
      console.log('PDF saved successfully');
      
    } catch (error) {
      console.error("PDF download failed:", error);
      alert("Failed to generate PDF. Please try again.");
    } finally {
      setExportingPDF(false);
    }
  };

  const handleBackToDashboard = () => {
    navigate('/dashboard/reports');
  };

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black/90 flex items-center justify-center z-50">
        <div className="bg-dark-900 rounded-2xl p-8 max-w-md w-full mx-4 shadow-xl">
          <div className="text-center">
            <LoadingSpinner size="lg" />
            <p className="text-white mt-4 font-medium">Loading report data...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!chartData) {
    return (
      <div className="fixed inset-0 bg-black/90 flex items-center justify-center z-50">
        <div className="bg-dark-900 rounded-2xl p-8 max-w-md w-full mx-4 shadow-xl">
          <div className="text-center">
            <p className="text-white mb-4 font-medium">
              Error: Could not load chart data for this report.
            </p>
            <Button onClick={onClose} variant="primary">
              Close
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black/90 flex items-center justify-center z-50 p-2 sm:p-4">
      <div className="bg-dark-950 rounded-2xl w-full max-w-6xl h-full max-h-[95vh] flex flex-col overflow-hidden shadow-2xl">
        {/* Header - Improved for mobile */}
        <div className="flex items-center justify-between p-3 md:p-5 border-b border-dark-800 bg-dark-900">
          <div className="flex items-center">
            <Button 
              onClick={handleBackToDashboard} 
              variant="ghost" 
              size="sm" 
              icon={ArrowLeft}
              className="mr-2 text-white hover:bg-dark-800"
              aria-label="Back to dashboard"
            >
              <span className="hidden sm:inline">Back</span>
            </Button>
            
            <div className="hidden md:flex items-center">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-700 to-purple-900 rounded-lg flex items-center justify-center mr-3 shadow-lg">
                <Eye className="w-5 h-5 text-white" />
              </div>
              <div>
                <h2 className="text-lg md:text-xl font-medium text-white">
                  {report.title}
                </h2>
                <p className="text-gray-300 text-sm">
                  {report.report_type
                    .replace(/-/g, " ")
                    .replace(/\b\w/g, (l) => l.toUpperCase())}{" "}
                  Report
                  {report.is_premium && (
                    <span className="ml-2 inline-flex items-center">
                      <Crown className="w-3 h-3 text-amber-400 mr-1" />
                      <span className="font-normal">Premium</span>
                    </span>
                  )}
                </p>
              </div>
            </div>
            
            {/* Mobile title */}
            <div className="md:hidden">
              <h2 className="text-base font-medium text-white truncate max-w-[150px]">
                {report.title}
              </h2>
            </div>
          </div>
          
          {/* Mobile menu button */}
          <div className="md:hidden">
            <Button 
              onClick={() => setShowMobileMenu(!showMobileMenu)} 
              variant="ghost" 
              size="sm" 
              icon={Menu}
              className="text-white"
            />
          </div>
          
          {/* Desktop controls */}
          <div className="hidden md:flex items-center space-x-2">

            <Button
              onClick={downloadPDF}
              variant="outline"
              size="sm"
              icon={FileText}
              className="text-white border-dark-700 hover:bg-dark-800"
              disabled={exportingPDF}
            >
              {exportingPDF ? "Exporting..." : "Download PDF"}
            </Button>
            <Button 
              onClick={() => onClose()} 
              variant="ghost" 
              size="sm" 
              icon={X}
              className="text-white hover:bg-dark-800"
              aria-label="Close report"
            >
              Close
            </Button>
          </div>
          
          {/* Mobile menu */}
          {showMobileMenu && (
            <div className="absolute top-14 right-2 bg-dark-900 rounded-lg shadow-lg border border-dark-800 p-2 z-50 md:hidden">
              <div className="flex flex-col space-y-2">

                <Button
                  onClick={() => {
                    downloadPDF();
                    setShowMobileMenu(false);
                  }}
                  variant="ghost"
                  size="sm"
                  icon={FileText}
                  className="justify-start text-white hover:bg-dark-800"
                  disabled={exportingPDF}
                >
                  {exportingPDF ? "Exporting..." : "Download PDF"}
                </Button>
                <Button 
                  onClick={() => onClose()} 
                  variant="ghost" 
                  size="sm" 
                  icon={X}
                  className="justify-start text-white hover:bg-dark-800"
                  aria-label="Close report"
                >
                  Close
                </Button>
              </div>
            </div>
          )}
        </div>

        {/* Content - Enhanced for better readability */}
        <div className="flex-1 overflow-hidden">
          <div className="w-full h-full overflow-y-auto bg-dark-950">
            <ReportRenderer
              report={report}
              chartData={chartData}
              className="h-full report-renderer px-3 sm:px-5 pt-4 pb-16"
            />
          </div>
        </div>
        
        {/* Footer */}
        <div className="p-3 md:p-4 border-t border-dark-800 bg-dark-900">
          <div className="flex justify-between items-center">
            <div className="text-gray-400 text-xs">
              © {new Date().getFullYear()} Mystic Banana Astro
            </div>
            <div className="text-gray-400 text-xs">
              {report.created_at && new Date(report.created_at).toLocaleDateString()}
            </div>
          </div>
        </div>
        
        {/* PDF Export Overlay */}
        {exportingPDF && (
          <div className="absolute inset-0 bg-black/70 flex items-center justify-center z-10">
            <div className="bg-dark-800 rounded-xl p-6 max-w-sm mx-auto">
              <LoadingSpinner size="lg" />
              <p className="mt-4 text-center text-white">Generating PDF...</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default HTMLReportViewer;
