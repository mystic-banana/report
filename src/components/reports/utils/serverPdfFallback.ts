/**
 * Server-side PDF generation fallback
 * This utility provides a reliable alternative when client-side PDF generation fails
 */
import { createClient } from '@supabase/supabase-js';
import toast from 'react-hot-toast';

// Initialize Supabase client
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 
                   process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 
                       process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseAnonKey);

interface ServerPDFOptions {
  reportId: string;
  userId?: string;
  includeCharts?: boolean;
  highQuality?: boolean;
  watermark?: boolean;
}

/**
 * Generates a PDF report using the server-side PDF generation service
 * This is more reliable but may take slightly longer
 */
export async function generateServerSidePDF(htmlContent: string, fileName: string, options: ServerPDFOptions): Promise<string | null> {
  try {
    // Show toast to indicate processing
    const toastId = toast.loading('Generating PDF via server...');
    
    console.log('Starting server-side PDF generation');
    
    // Prepare the payload
    const payload = {
      html: htmlContent,
      options: {
        format: 'A4',
        margin: { top: '10mm', right: '10mm', bottom: '15mm', left: '10mm' },
        printBackground: true,
        preferCSSPageSize: true,
        displayHeaderFooter: true,
        headerTemplate: '<div></div>',
        footerTemplate: `<div style="width: 100%; text-align: center; font-size: 10px; color: #555;">
          <span>Generated by Mystic Banana ${new Date().toLocaleDateString()}</span>
          <span style="margin: 0 10px;">â€¢</span>
          <span class="pageNumber"></span> of <span class="totalPages"></span>
        </div>`,
        ...options
      }
    };
    
    // Call the Supabase function for PDF generation
    const { data, error } = await supabase.functions.invoke('generate-pdf-report', {
      body: JSON.stringify(payload),
    });
    
    if (error) {
      console.error('Server-side PDF generation failed:', error);
      toast.error('Failed to generate PDF. Please try again later.', { id: toastId });
      return null;
    }
    
    // Check if the response has the expected structure
    if (!data || !data.url) {
      console.error('Invalid response from PDF generation service:', data);
      toast.error('Invalid response from server. Please try again.', { id: toastId });
      return null;
    }
    
    // Get the downloadable URL
    const pdfUrl = data.url;
    console.log('PDF generated successfully, URL:', pdfUrl);
    toast.success('PDF generated successfully!', { id: toastId });
    
    // Trigger download
    const link = document.createElement('a');
    link.href = pdfUrl;
    link.setAttribute('download', fileName);
    link.setAttribute('target', '_blank');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    return pdfUrl;
    
  } catch (error) {
    console.error('Error in server-side PDF generation:', error);
    toast.error('PDF generation failed. Please try again later.');
    return null;
  }
}
